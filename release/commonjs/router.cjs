"use strict";Object.defineProperty(exports,"__esModule",{value:!0});class t extends class{static getInstance(){return this.instance||(this.instance=new this),this.instance}}{constructor(){if(super(),"file:"===window.location.protocol)throw new Error("Cannot use the History API without a web server.");if(!window.history)throw new ReferenceError("This browser does not support the History API.");this.routes=[],this.fallback=null}static on(e,o){if(2!==arguments.length)throw new Error("Expected two arguments.");if("string"!=typeof e)throw new TypeError("First argument is not a string.");if("function"!=typeof o)throw new TypeError("Second argument is not a function.");t.getInstance().routes.push({callback:o,pattern:e})}static start(){if(0!==arguments.length)throw new Error("Expected no arguments.");const e=()=>{const e=window.location.pathname,o=/:(?<placeholder>[a-zA-Z]+)/gu;let n=!1;for(const{pattern:r,callback:s}of t.getInstance().routes){const t=new RegExp(`^${r.replace(o,"(?<$1>[a-zA-Z0-9]+)")}$`,"u");if(t.test(e)){s(t.exec(e).groups),n=!0;break}}n||null===t.getInstance().fallback||t.getInstance().fallback()};window.addEventListener("popstate",e),e()}static goToPage(t){if(1!==arguments.length)throw new Error("Expected one argument.");if("string"!=typeof t)throw new TypeError("First argument is not a string.");if("file:"===window.location.protocol)throw new Error("Cannot use the History API without a web server.");if(!window.history)throw new ReferenceError("This browser does not support the History API.");window.history.pushState(null,null,t),window.dispatchEvent(new window.CustomEvent("popstate"))}static onPageNotFound(e){if(1!==arguments.length)throw new Error("Expected one argument.");if("function"!=typeof e)throw new TypeError("First argument is not a function.");t.getInstance().fallback=e}}exports.Router=t;
